% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SCP-analysis.R
\name{GeneConvert}
\alias{GeneConvert}
\title{Gene ID conversion function using biomart}
\usage{
GeneConvert(
  geneID,
  geneID_from_IDtype = "symbol",
  geneID_to_IDtype = "entrez_id",
  species_from = "Homo_sapiens",
  species_to = NULL,
  Ensembl_version = 103,
  attempts = 5,
  mirror = NULL
)
}
\arguments{
\item{geneID}{A vector of the geneID character.}

\item{geneID_from_IDtype}{ID type of the geneID. e.g. "symbol", "ensembl_id", "entrez_id"}

\item{geneID_to_IDtype}{ID type to convert to. e.g. "symbol", "ensembl_id", "entrez_id"}

\item{species_from}{Latin names for animals of the input geneID.}

\item{species_to}{Latin names for animals of the output geneID. e.g. "Homo_sapiens","Mus_musculus"}

\item{Ensembl_version}{Ensembl database version. If NULL, use the current release version.}

\item{attempts}{Number of attempts to connect with the biomart service.}

\item{mirror}{Specify an Ensembl mirror to connect to. The valid options here are 'www', 'uswest', 'useast', 'asia'.}
}
\value{
A list.
}
\description{
This function can convert different gene ID types within one species or bewteen two species using biomart service.
}
\examples{
res <- GeneConvert(
  geneID = c("CDK1", "MKI67", "TOP2A", "AURKA", "CTCF"),
  geneID_from_IDtype = "symbol",
  geneID_to_IDtype = "entrez_id",
  species_from = "Homo_sapiens",
  species_to = "Mus_musculus",
  Ensembl_version = 103
)
str(res)

# Convert the human genes to mouse homologs and replace the raw counts in a Seurat object.
data("pancreas_sub")
counts <- pancreas_sub@assays$RNA@counts
res <- GeneConvert(
  geneID = rownames(counts),
  geneID_from_IDtype = "symbol",
  geneID_to_IDtype = "symbol",
  species_from = "Mus_musculus",
  species_to = "Homo_sapiens",
  Ensembl_version = 103
)
homologs_counts <- counts[res$geneID_expand[, "from_geneID"], ]
rownames(homologs_counts) <- res$geneID_expand[, "symbol"]
homologs_counts <- Matrix.utils::aggregate.Matrix(homologs_counts, row.names(homologs_counts))
homologs_counts

}
