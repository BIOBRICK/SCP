% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SCP-workflow.R
\name{Integration_SCP}
\alias{Integration_SCP}
\title{Integration_SCP}
\usage{
Integration_SCP(
  srtMerge = NULL,
  batch = "orig.ident",
  append = TRUE,
  srtList = NULL,
  integration_method = "Uncorrected",
  do_normalization = NULL,
  normalization_method = "logCPM",
  do_HVF_finding = TRUE,
  HVF_source = "separate",
  HVF_method = "vst",
  nHVF = 2000,
  HVF = NULL,
  do_scaling = TRUE,
  vars_to_regress = NULL,
  regression_model = "linear",
  liner_reduction = "pca",
  liner_reduction_dims = 100,
  liner_reduction_distance = "euclidean",
  liner_reduction_dims_use = NULL,
  force_liner_reduction = FALSE,
  nonliner_reduction = "umap",
  nonliner_reduction_dims = c(2, 3),
  nonliner_reduction_distance = "cosine",
  force_nonliner_reduction = TRUE,
  do_cluster_finding = TRUE,
  cluster_algorithm = "louvain",
  cluster_resolution = 0.6,
  cluster_reorder = TRUE,
  seed = 11,
  ...
)
}
\arguments{
\item{srtMerge}{A merged \code{Seurat} object with batch information.}

\item{batch}{Metadata column name containing the batch information.}

\item{append}{Whether append results into the \code{srtMerge}. Only valid when srtMerge is provided.}

\item{srtList}{A list of \code{Seurat} object.}

\item{integration_method}{Integration method. Can be one of "Uncorrected", "Seurat", "scVI", "MNN", "fastMNN", "Harmony", "Scanorama", "BBKNN", "CSS", "LIGER", "Conos", "ZINBWaVE".}

\item{do_normalization}{Whether to normalize the data. If NULL, will automatically determine.}

\item{normalization_method}{Normalization method.Can be one of "logCPM", "SCT".}

\item{do_HVF_finding}{Whether to find the high variable features(HVF). If NULL, will automatically determine.}

\item{HVF_source}{Source of the HVF. Can be one of "separate" and "global".}

\item{nHVF}{HVF number to use.}

\item{HVF}{Custom high variable features.}

\item{do_scaling}{Whether to scale the data. If NULL, will automatically determine.}

\item{vars_to_regress}{Variables to regress out.}

\item{regression_model}{Use a linear model or generalized linear model (poisson, negative binomial) for the regression. Options are 'linear' (default), 'poisson', and 'negbinom'}

\item{liner_reduction}{Liner reduction method name. Can be one of "pca", "ica", "nmf", "mds", "glmpca".}

\item{liner_reduction_dims}{Dimensions to calculate when performing liner reduction.}

\item{liner_reduction_distance}{A distance method if liner reduction need.}

\item{liner_reduction_dims_use}{Which dimensions to use.}

\item{nonliner_reduction}{Non-liner reduction method name. Can be one of "umap", "umap-naive", "umap-learn", "tsne", "dm".}

\item{nonliner_reduction_dims}{Dimensions to calculate when performing non-liner reduction.}

\item{nonliner_reduction_distance}{A distance method if non-liner reduction need.}

\item{cluster_algorithm}{Algorithm for modularity optimization when finding clusters.}

\item{cluster_resolution}{Cluster resolution parameter.}

\item{cluster_reorder}{Whether to reorder the cluster names using hierarchical clustering.}

\item{seed}{Set a random seed.}

\item{...}{}
}
\value{
A \code{Seurat} object containing the result.
}
\description{
Single cell pipeline for the integration of multiple datasets.
}
\examples{
if (!require("SeuratData", quietly = TRUE)) {
  devtools::install_github("zhanghao-njmu/seurat-data")
}
library(SeuratData)
library(cowplot)
suppressWarnings(InstallData("panc8"))
data("panc8")
cell_sub <- unlist(lapply(split(colnames(panc8), panc8$tech), function(x) sample(x, size = 500)))
panc8 <- subset(panc8, cells = cell_sub)
plist <- list()
for (method in c("Uncorrected", "Seurat", "scVI", "MNN", "fastMNN", "Harmony", "Scanorama", "BBKNN", "CSS", "LIGER", "Conos", "ZINBWaVE")) {
  panc8 <- Integration_SCP(panc8, batch = "tech", integration_method = method)
  plist[[method]] <- ClassDimPlot(panc8, group.by = c("tech", "celltype"), theme_use = "theme_blank")
  print(plist[[method]])
}
}
